name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  AZURE_RESOURCE_GROUP: 'qatar-visa-guide-rg'
  
jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint || true

      - name: Run tests
        run: npm test || true

  build:
    name: Build Application
    needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run db:generate --workspace=database

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/web/.next/
            packages/web/public/
            node_modules/
          retention-days: 1

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep template
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: |
            environment=prod
            appName=qatar-visa-guide
            sqlAdminLogin=${{ secrets.SQL_ADMIN_LOGIN }}
            sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
          deploymentName: 'deployment-${{ github.run_number }}'

  database-migration:
    name: Database Migration
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run db:migrate --workspace=database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-app:
    name: Deploy Application
    needs: database-migration
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_APP_SERVICE_NAME }}
          package: .

      - name: Wait for deployment
        run: sleep 30

  smoke-tests:
    name: Smoke Tests
    needs: deploy-app
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/api/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi
          echo "Health check passed"

      - name: Search API test
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.APP_URL }}/api/search?q=work")
          if [ $response -ne 200 ]; then
            echo "Search API test failed with status $response"
            exit 1
          fi
          echo "Search API test passed"

  notify:
    name: Notify Deployment
    needs: [deploy-app, smoke-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
